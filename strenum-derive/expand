#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2024::*;
#[macro_use]
extern crate std;
use proc_macro::{self, TokenStream};
use quote::quote;
use syn::{DeriveInput, Fields, Ident, parse_macro_input};
#[proc_macro_derive(AutoStrEnum)]
pub fn derive(input: TokenStream) -> TokenStream {
    let ast = match ::syn::parse::<DeriveInput>(input) {
        ::syn::__private::Ok(data) => data,
        ::syn::__private::Err(err) => {
            return ::syn::__private::TokenStream::from(err.to_compile_error());
        }
    };
    let enum_name = &ast.ident;
    let variants = if let syn::Data::Enum(enum_) = ast.data {
        enum_.variants
    } else {
        {
            ::core::panicking::panic_fmt(
                format_args!("{0:?} is not an enum...", enum_name),
            );
        }
    };
    let field_idents = variants
        .iter()
        .map(|v| match v.fields {
            Fields::Unit => v.ident.clone(),
            _ => {
                ::core::panicking::panic_fmt(format_args!("non-unit field..."));
            }
        })
        .collect::<Vec<Ident>>();
    let result = {
        let mut _s = ::quote::__private::TokenStream::new();
        ::quote::__private::push_ident(&mut _s, "impl");
        ::quote::__private::push_ident(&mut _s, "StrIsEnumMember");
        ::quote::__private::push_colon(&mut _s);
        ::quote::__private::push_ident(&mut _s, "Sized");
        ::quote::__private::push_ident(&mut _s, "for");
        ::quote::ToTokens::to_tokens(&enum_name, &mut _s);
        ::quote::__private::push_group(
            &mut _s,
            ::quote::__private::Delimiter::Brace,
            {
                let mut _s = ::quote::__private::TokenStream::new();
                ::quote::__private::push_ident(&mut _s, "const");
                ::quote::__private::push_ident(&mut _s, "NAME");
                ::quote::__private::push_colon(&mut _s);
                ::quote::__private::push_and(&mut _s);
                ::quote::__private::push_lifetime(&mut _s, "\'static");
                ::quote::__private::push_ident(&mut _s, "str");
                ::quote::__private::push_eq(&mut _s);
                ::quote::__private::parse(&mut _s, "\"foo\"");
                ::quote::__private::push_semi(&mut _s);
                _s
            },
        );
        _s
    };
    result.into()
}
const _: () = {
    extern crate proc_macro;
    #[rustc_proc_macro_decls]
    #[used]
    #[allow(deprecated)]
    static _DECLS: &[proc_macro::bridge::client::ProcMacro] = &[
        proc_macro::bridge::client::ProcMacro::custom_derive("AutoStrEnum", &[], derive),
    ];
};
